; These CIL statements declare a user, role, type and range of:
;    unconfined.user:unconfined.role:unconfined.process:s0-s0
;
; A CIL policy requires at least one 'allow' rule and sid to be declared
; before a policy will build.
;
(handleunknown allow)

(policycap open_perms)
(category c0)
(categoryorder (c0))
(sensitivity s0)
(sensitivityorder (s0))
(sensitivitycategory s0 (c0))
(level systemLow (s0))
(levelrange low_low (systemLow systemLow))
(sid kernel)
(sidorder (kernel))
(sidcontext kernel unconfined.sid_context)

; Define object_r role. This must be assigned in CIL.
(role object_r)

; The unconfined namespace:
(block unconfined
	(user user)
	(userrange user (systemLow systemLow))
	(userlevel user systemLow)
	(userrole user role)
	(role role)
	(type process)
	(roletype object_r process)
	(roletype role process)

	; Define a SID context:
	(context sid_context (user role process low_low))

	(type object)
	(roletype object_r object)
)


;;;;; Aggiunta di regole per verifica proprieta' CIL

(classorder (folder file))
(class file (read write open getattr))
(classpermission fileread)
(classpermissionset fileread (file (read)))
(class folder ())

(type a)
(type b)
(type c)

(macro m1()
	(allow b b (file (read))))


(block A
   (macro m1()
   		(allow a a (file (read))))
   (block B
       (macro m()
           (call m1)
)))


(block C
   (blockinherit A.B)
)

(block D
	(macro m1()
		(allow c c (file (read))))
   	(call C.m)
)